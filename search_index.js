var documenterSearchIndex = {"docs":
[{"location":"api/#API","page":"API","title":"API","text":"","category":"section"},{"location":"api/#RV-Data","page":"API","title":"RV Data","text":"","category":"section"},{"location":"api/","page":"API","title":"API","text":"RVData\nCompositeRVData\nget_times\nget_rvs\nget_rverrs\nget_instnames\nget_λs\nread_radvel_file","category":"page"},{"location":"api/#RVModelingToolkit.RVData","page":"API","title":"RVModelingToolkit.RVData","text":"Stores the times, RVs, and RV errors for a single spectrograph.\n\nFields\n\nt::Vector{Float64} The times of the observations in BJD.\nrv::Vector{Float64} The RVs in m/s.\nrverr::Vector{Float64} The RV errors in m/s.\ninstname::Union{String, Nothing} The name of the spectrograph.\nλ::Union{Int, Nothing} The wavelength of this dataset which may be used in any modeling.\n\nConstruct an RVData object.\n\n\n\n\n\n","category":"type"},{"location":"api/#RVModelingToolkit.CompositeRVData","page":"API","title":"RVModelingToolkit.CompositeRVData","text":"Wrapper dictionary-like type to store RVs from multiple spectrographs.\n\n\n\n\n\n","category":"type"},{"location":"api/#RVModelingToolkit.get_times","page":"API","title":"RVModelingToolkit.get_times","text":"get_times(data::CompositeRVData; do_sort=true)\n\nGenerates a single vector of times of all observations, sorted in time if do_sort=true.\n\n\n\n\n\n","category":"function"},{"location":"api/#RVModelingToolkit.get_rvs","page":"API","title":"RVModelingToolkit.get_rvs","text":"get_rvs(data::CompositeRVData; do_sort=true)\n\nGenerates a single vector of RVs of all observations, sorted in time if do_sort=true.\n\n\n\n\n\n","category":"function"},{"location":"api/#RVModelingToolkit.get_rverrs","page":"API","title":"RVModelingToolkit.get_rverrs","text":"get_rverrs(data::CompositeRVData; do_sort=true)\n\nGenerates a single vector of RV errors of all observations, sorted in time if do_sort=true.\n\n\n\n\n\n","category":"function"},{"location":"api/#RVModelingToolkit.get_instnames","page":"API","title":"RVModelingToolkit.get_instnames","text":"get_instnames(data::CompositeRVData; do_sort=true)\n\nGenerates a single vector of instrument names for all observations, sorted in time if do_sort=true.\n\n\n\n\n\n","category":"function"},{"location":"api/#RVModelingToolkit.get_λs","page":"API","title":"RVModelingToolkit.get_λs","text":"get_λs(data::CompositeRVData; do_sort=true)\n\nGenerates a single vector of wavelengths of all observations, sorted in time if do_sort=true.\n\n\n\n\n\n","category":"function"},{"location":"api/#RVModelingToolkit.read_radvel_file","page":"API","title":"RVModelingToolkit.read_radvel_file","text":"read_radvel_file(fname::String, λs=nothing)\n\nReads a RadVel-like formatted .csv file with columns time,mnvel,errvel,tel into a CompositeRVData object.\n\n\n\n\n\n","category":"function"},{"location":"api/#Parameters","page":"API","title":"Parameters","text":"","category":"section"},{"location":"api/","page":"API","title":"API","text":"Parameter\nParameters","category":"page"},{"location":"api/#RVModelingToolkit.Parameter","page":"API","title":"RVModelingToolkit.Parameter","text":"Type for a RadVel-like Bayesian Parameter.\n\nFields:\n\nname::Union{String, Nothing} The name of the parameter.\nvalue::Float64 The value of the parameter.\nvary::Bool Whether or not to to fit for this parameter.\npriors::Vector{Priors.Prior} A Vector of priors for this parameter.\nlatex_str::Union{LaTeXString, Nothing} A LaTeX-formatted string, useful for plotting.\n\n\n\n\n\n","category":"type"},{"location":"api/#RVModelingToolkit.Parameters","page":"API","title":"RVModelingToolkit.Parameters","text":"Container for multiple Bayesian parameters through a dictionary-like API.\n\n\n\n\n\n","category":"type"},{"location":"api/#Priors","page":"API","title":"Priors","text":"","category":"section"},{"location":"api/","page":"API","title":"API","text":"Prior\nPriors.Gaussian\nPriors.Uniform\nPriors.JeffreysGD\nPriors.Positive\nlogprob","category":"page"},{"location":"api/#RVModelingToolkit.Priors.Prior","page":"API","title":"RVModelingToolkit.Priors.Prior","text":"Base types for all priors.\n\n\n\n\n\n","category":"type"},{"location":"api/#RVModelingToolkit.Priors.Gaussian","page":"API","title":"RVModelingToolkit.Priors.Gaussian","text":"A Gaussian prior with mean μ::Float64 and standard deviation σ::Float64.\n\n\n\n\n\n","category":"type"},{"location":"api/#RVModelingToolkit.Priors.Uniform","page":"API","title":"RVModelingToolkit.Priors.Uniform","text":"A uniform prior with finite bounds.\n\n\n\n\n\n","category":"type"},{"location":"api/#RVModelingToolkit.Priors.JeffreysGD","page":"API","title":"RVModelingToolkit.Priors.JeffreysGD","text":"JeffreysGD(lower_bound::Real, upper_bound::Real, knee::Real=0.0)\n\nConstruct a JeffreysGD (~ (x-x0)^-1) bounded by lower_bound and upper_bound with a knee x0.\n\n\n\n\n\n","category":"type"},{"location":"api/#RVModelingToolkit.Priors.Positive","page":"API","title":"RVModelingToolkit.Priors.Positive","text":"A trait for a positive (improper) prior to keep a parameter > 0, useful for semi-amplitudes.\n\n\n\n\n\n","category":"type"},{"location":"api/#RVModelingToolkit.Priors.logprob","page":"API","title":"RVModelingToolkit.Priors.logprob","text":"Computes the natural logarithm of the probability for this prior given a parameter value.\n\n\n\n\n\n","category":"function"},{"location":"api/#The-Keplerian-Model","page":"API","title":"The Keplerian Model","text":"","category":"section"},{"location":"api/","page":"API","title":"API","text":"RVModel\nbuild\nbuild_planet\nbuild_planets\nbuild_trend_zero\nbuild_global_trend\ntrue_anomaly\nsolve_kepler\ntc_to_tp\ntp_to_tc\ndisable_planet_parameters!\nsolve_kepler_all_times","category":"page"},{"location":"api/#RVModelingToolkit.RVModel","page":"API","title":"RVModelingToolkit.RVModel","text":"RVModel(planets::Union{OrderedDict{Int, OrbitBasis}, Nothing}=nothing, trend_poly_deg::Int=0; t0=2400000.0)\n\nConstruct an RVModel object to model RVs with one or multiple Keplerian orbits.\n\n\n\n\n\n","category":"type"},{"location":"api/#RVModelingToolkit.build","page":"API","title":"RVModelingToolkit.build","text":"build(m::RVModel, pars::Parameters, t::AbstractVector{<:Real})\n\nBuild the Keplerian + trend model, not including zero point corrections (thus only degree > 0 corrections).\n\n\n\n\n\n","category":"function"},{"location":"api/#RVModelingToolkit.build_planet","page":"API","title":"RVModelingToolkit.build_planet","text":"build_planet(m::RVModel, pars::Parameters, t::AbstractVector{<:Real}, planet_index::Int)\nBuild the model for the single planet `planet_index`.\n\n\n\n\n\nbuild_planet(t::Union{AbstractVector{<:Real}, <:Real}, per::Real, tp::Real, ecc::Real, w::Real, k::Real)\n\nBuilds the Keplerian model for a single planet on the StandardOrbitBasis.\n\n\n\n\n\n","category":"function"},{"location":"api/#RVModelingToolkit.build_planets","page":"API","title":"RVModelingToolkit.build_planets","text":"build_planets(m::RVModel, pars::Parameters, t::AbstractVector{<:Real})\n\nBuild and addd all planet models together.\n\n\n\n\n\n","category":"function"},{"location":"api/#RVModelingToolkit.build_trend_zero","page":"API","title":"RVModelingToolkit.build_trend_zero","text":"build_trend_zero(m::RVModel, data::CompositeRVData, pars::Parameters, t::AbstractVector{<:Real}; instname::Union{Int, Nothing}=nothing)\n\nBuild the zero point model for each spectrograph (gamma parameters).\n\n\n\n\n\n","category":"function"},{"location":"api/#RVModelingToolkit.build_global_trend","page":"API","title":"RVModelingToolkit.build_global_trend","text":"build_global_trend(m::RVModel, pars::Parameters, t::AbstractVector{<:Real})\n\nBuild the global trend model, not including the zero point gammas of each spectrograph (gamma dot parameters).\n\n\n\n\n\n","category":"function"},{"location":"api/#RVModelingToolkit.true_anomaly","page":"API","title":"RVModelingToolkit.true_anomaly","text":"true_anomaly(t, tp, per, ecc)\n\nComputes the true anomaly by solving Kepler's equation.\n\n\n\n\n\n","category":"function"},{"location":"api/#RVModelingToolkit.solve_kepler","page":"API","title":"RVModelingToolkit.solve_kepler","text":"solve_kepler(ma::Float64, ecc::Float64)::Float64\n\nSolves Kepler's equation with a higher order Newton method. This method is largely based on the Kepler's equation solver in RadVel.\n\n\n\n\n\n","category":"function"},{"location":"api/#RVModelingToolkit.tc_to_tp","page":"API","title":"RVModelingToolkit.tc_to_tp","text":"tc_to_tp(tc, per, ecc, w)\n\nConverts the time of conjunction to the time of periastron.\n\n\n\n\n\n","category":"function"},{"location":"api/#RVModelingToolkit.tp_to_tc","page":"API","title":"RVModelingToolkit.tp_to_tc","text":"tp_to_tc(tp, per, ecc, w)\n\nConverts the time of periastron to the time of conjunction.\n\n\n\n\n\n","category":"function"},{"location":"api/#RVModelingToolkit.disable_planet_parameters!","page":"API","title":"RVModelingToolkit.disable_planet_parameters!","text":"disable_planet_parameters!(pars::Parameters, planets::OrderedDict{Int, OrbitBasis}, planet_index::Int)\n\nDisables the parameters corresponding to planet_index.\n\n\n\n\n\n","category":"function"},{"location":"api/#RVModelingToolkit.solve_kepler_all_times","page":"API","title":"RVModelingToolkit.solve_kepler_all_times","text":"solve_kepler_all_times(mas::AbstractVector{<:Real}, ecc::Real)\n\nWrapper to solve Kepler's equation for multiple observation times (multiple mean anomalies, mas) for a single value of eccentricity ecc.\n\n\n\n\n\n","category":"function"},{"location":"api/#Orbit-Bases","page":"API","title":"Orbit Bases","text":"","category":"section"},{"location":"api/","page":"API","title":"API","text":"OrbitBasis\nStandardOrbitBasis\nTCOrbitBasis\nparameters\nconvert_basis","category":"page"},{"location":"api/#RVModelingToolkit.OrbitBasis","page":"API","title":"RVModelingToolkit.OrbitBasis","text":"Base type for a Keplerian orbit basis through RVs.\n\n\n\n\n\n","category":"type"},{"location":"api/#RVModelingToolkit.StandardOrbitBasis","page":"API","title":"RVModelingToolkit.StandardOrbitBasis","text":"The standard RadVel orbit basis Orbital period (per; days) Time of periastron (tp; days/BJD) Orbital eccentricity (ecc; unitless) Argument of periastron (w; radians) RV semi-amplitude (k; m/s)\n\n\n\n\n\n","category":"type"},{"location":"api/#RVModelingToolkit.TCOrbitBasis","page":"API","title":"RVModelingToolkit.TCOrbitBasis","text":"A common orbit basis for transiting planets. Orbital period (per; days) Time of conjunction/transit (tc; days/BJD) Orbital eccentricity (ecc; unitless) Argument of periastron (w; radians) RV semi-amplitude (k; m/s)\n\n\n\n\n\n","category":"type"},{"location":"api/#RVModelingToolkit.parameters","page":"API","title":"RVModelingToolkit.parameters","text":"parameters(b::OrbitBasis, i::Int)\n\nReturns a vector of parameter names for this basis and planet_index.\n\n\n\n\n\n","category":"function"},{"location":"api/#RVModelingToolkit.convert_basis","page":"API","title":"RVModelingToolkit.convert_basis","text":"Convert from one orbit basis to another.\n\n\n\n\n\n","category":"function"},{"location":"api/#Gaussian-Processeses","page":"API","title":"Gaussian Processeses","text":"","category":"section"},{"location":"api/","page":"API","title":"API","text":"NoiseKernel\nGaussianProcess\nQuasiPeriodic\nChromaticKernelJ1\nChromaticKernelJ2\ncompute_cov_matrix\npredict\ncompute_stationary_dist_matrix","category":"page"},{"location":"api/#RVModelingToolkit.NoiseKernel","page":"API","title":"RVModelingToolkit.NoiseKernel","text":"Base type for noise kernels.\n\n\n\n\n\n","category":"type"},{"location":"api/#RVModelingToolkit.GaussianProcess","page":"API","title":"RVModelingToolkit.GaussianProcess","text":"Wrapper for a Gaussian Process noise kernel.\n\n\n\n\n\n","category":"type"},{"location":"api/#RVModelingToolkit.QuasiPeriodic","page":"API","title":"RVModelingToolkit.QuasiPeriodic","text":"Type for a QuasiPeriodic GP kernel. par_names is a vector containing the names of the hyper-parameters, which must be in the following order, however can use arbitrary names.     1. amplitude     2. exponential length scale     3. period length scale     4. period\n\n\n\n\n\n","category":"type"},{"location":"api/#RVModelingToolkit.ChromaticKernelJ1","page":"API","title":"RVModelingToolkit.ChromaticKernelJ1","text":"Type for a ChromaticKernelJ1 GP kernel. par_names is a vector containing the names of the hyper-parameters, which must be in the following order, however can use arbitrary names.     1. amplitude     2. exponential length scale     3. period length scale     4. period\n\n\n\n\n\n","category":"type"},{"location":"api/#RVModelingToolkit.ChromaticKernelJ2","page":"API","title":"RVModelingToolkit.ChromaticKernelJ2","text":"Type for a ChromaticKernelJ2 GP kernel. par_names is a vector containing the names of the hyper-parameters, which must be in the following order, however can use arbitrary names.     1. amplitude     2. exponential length scale     3. period length scale     4. period\n\n\n\n\n\n","category":"type"},{"location":"api/#RVModelingToolkit.compute_cov_matrix","page":"API","title":"RVModelingToolkit.compute_cov_matrix","text":"compute_cov_matrix\n\nMethod to compute the covariance matrix. Must be implemented for a noise kernel, GP, and likelihood object.\n\n\n\n\n\n","category":"function"},{"location":"api/#RVModelingToolkit.predict","page":"API","title":"RVModelingToolkit.predict","text":"Make predictions with the GP model at arbitrary observation times.\n\n\n\n\n\n","category":"function"},{"location":"api/#RVModelingToolkit.compute_stationary_dist_matrix","page":"API","title":"RVModelingToolkit.compute_stationary_dist_matrix","text":"compute_stationary_dist_matrix(t1::AbstractVector{<:Real}, t2::AbstractVector{<:Real})\n\nComputes the stationary distance matrix D[i, j] = |t[i] - t[j]|\n\n\n\n\n\n","category":"function"},{"location":"api/#Posteriors,-Likelihoods","page":"API","title":"Posteriors, Likelihoods","text":"","category":"section"},{"location":"api/","page":"API","title":"API","text":"RVLikelihood\nRVPosterior\ncompute_logL\ncompute_logaprob\ncompute_prior_logprob\ncompute_residuals\ncompute_data_errors\ncompute_noise_components\ncompute_redχ2\ncompute_bic\ncompute_aicc","category":"page"},{"location":"api/#RVModelingToolkit.RVLikelihood","page":"API","title":"RVModelingToolkit.RVLikelihood","text":"RVLikelihood{M, N}\n\nA RadVel-like likelihood object for normally distributed errors (possibly after a GP).\n\n\n\n\n\n","category":"type"},{"location":"api/#RVModelingToolkit.RVPosterior","page":"API","title":"RVModelingToolkit.RVPosterior","text":"Construct an empty RVPosterior object\n\n\n\n\n\n","category":"type"},{"location":"api/#RVModelingToolkit.compute_logL","page":"API","title":"RVModelingToolkit.compute_logL","text":"compute_logL\n\nMethod to compute the logarithm of the a likelihood. Implemented by the likelihood and posterior objects.\n\n\n\n\n\n","category":"function"},{"location":"api/#RVModelingToolkit.compute_logaprob","page":"API","title":"RVModelingToolkit.compute_logaprob","text":"compute_logaprob\n\nMethod to compute the logarithm of the a posteriori probability. Implemented by the posterior object.\n\n\n\n\n\n","category":"function"},{"location":"api/#RVModelingToolkit.compute_prior_logprob","page":"API","title":"RVModelingToolkit.compute_prior_logprob","text":"compute_prior_logprob(post::RVPosterior, pars::Parameters)\n\nComputes the cumulative natural logarithm of prior probability.\n\n\n\n\n\n","category":"function"},{"location":"api/#RVModelingToolkit.compute_residuals","page":"API","title":"RVModelingToolkit.compute_residuals","text":"compute_residuals\n\nMethod to compute the residuals, still including correlated noise. Implemented by each likelihood.\n\n\n\n\n\n","category":"function"},{"location":"api/#RVModelingToolkit.compute_data_errors","page":"API","title":"RVModelingToolkit.compute_data_errors","text":"compute_data_errors\n\nMethod to compute the data errors. Implemented by each likelihood.\n\n\n\n\n\n","category":"function"},{"location":"api/#RVModelingToolkit.compute_noise_components","page":"API","title":"RVModelingToolkit.compute_noise_components","text":"compute_noise_components\n\nMethod to compute the noise components. Implemented by each likelihood / kernel.\n\n\n\n\n\n","category":"function"},{"location":"api/#RVModelingToolkit.compute_redχ2","page":"API","title":"RVModelingToolkit.compute_redχ2","text":"compute_redχ2(residuals, errors, ν)\n\nUtility to compute the reduced chi-squared metric.\n\n\n\n\n\ncompute_redχ2(post::RVPosterior, pars::Parameters)\n\n\n\n\n\n","category":"function"},{"location":"api/#RVModelingToolkit.compute_bic","page":"API","title":"RVModelingToolkit.compute_bic","text":"compute_bic(post::RVPosterior, pars::Parameters)\n\nComputes the Bayesian information criterion (BIC).\n\n\n\n\n\n","category":"function"},{"location":"api/#RVModelingToolkit.compute_aicc","page":"API","title":"RVModelingToolkit.compute_aicc","text":"compute_aicc(post::RVPosterior, pars::Parameters)\n\nComputes the small-sample Akaike information criterion (AICc).\n\n\n\n\n\n","category":"function"},{"location":"api/#Fitting","page":"API","title":"Fitting","text":"","category":"section"},{"location":"api/","page":"API","title":"API","text":"run_mapfit\nrun_mcmc\nmodel_comparison","category":"page"},{"location":"api/#RVModelingToolkit.run_mapfit","page":"API","title":"RVModelingToolkit.run_mapfit","text":"run_mapfit(post::RVPosterior, p0::Parameters)\n\nPerform a maximum a posteriori fit using IterativeNelderMead.jl. Returns a NamedTuple with fields: pbest::Parameters The best fit parameters. lnL::Float64 The nominal log-likelihood fcalls::Int The number of function calls. simplex::Matrix{Float64} The final simplex from the IterativeNelderMead solver. iteration::Int The final iteration of the IterativeNelderMead solver.\n\n\n\n\n\n","category":"function"},{"location":"api/#RVModelingToolkit.run_mcmc","page":"API","title":"RVModelingToolkit.run_mcmc","text":"run_mcmc(post::RVPosterior, p0::Parameters; n_burn_steps, τrel_thresh=0.01, n_min_steps=1000, n_τs_thresh=40, check_every=100, n_max_steps=100_000)\n\nPerforms an MCMC analysis with n_burn_steps followed by a dynamic number of steps, bounded by n_min_steps and n_max_steps. Convergence is determined through measuring the median auto-correlation time (# steps). Returns a NamedTuple with fields: pbest::Parameters The set of parameters that yielded the best log-likelihood from all chains. lnLbest::Float64 The corresponding log-likelihood for the best tested parameters. pmed::Int The parameters corresponding to the 50th percentile of each distribution. lnLmed::Matrix{Float64} The corresponding log-likelihood for the median parameters. n_steps::Int The number of MCMC steps performed (ignoring burn-in). τs::Vector{Float64} The median auto-correlation times of each step. chains::Matrix{Float64} The flattened MCMC chain of shape = (n_steps, n_vary_parameters) lnLs::Vector{Float64} The corresponding log-likelihoods for the chain.\n\n\n\n\n\n","category":"function"},{"location":"api/#RVModelingToolkit.model_comparison","page":"API","title":"RVModelingToolkit.model_comparison","text":"model_comparison(post::RVPosterior, p0::Parameters)\n\nRuns a MAP fit for each unique combination of planets stored in first(post)[2].model.planets. For each model, returns a NamedTuple with fields:     planets::OrderedDict{Int, OrbitBasis} The planets.     lnL::Float64 The nominal log likelihood.     pbest::Parameters The best fit parameters.     redχ2::Float64 The reduced chi square corresponding to the nominal log likelihood.     bic::Float64 The Bayesian Information Criterion (BIC).     aicc::Float64 The small-sample Akaike Information Criterion (AICC).     n_free::Int The number of varied parameters.     Δaicc::Float64 The change in the AICC relative to the model with the smallest AICC.     Δbic::Float64 The change in the BIC relative to the model with the smallest AICC.\n\n\n\n\n\n","category":"function"},{"location":"api/#Plotting","page":"API","title":"Plotting","text":"","category":"section"},{"location":"api/","page":"API","title":"API","text":"plot_rvs_phased\nplot_rvs_phased_all\nplot_rvs_full\ncorner_plot","category":"page"},{"location":"api/#RVModelingToolkit.plot_rvs_phased","page":"API","title":"RVModelingToolkit.plot_rvs_phased","text":"plot_rvs_phased(post::RVPosterior, pars::Parameters, planet_index::Int; data_colors::AbstractDict, titles::Bool=true, star_name::Union  {String, Nothing}=nothing)\n\nPlot the phased RVs for a single planet. Returns a PlotlyJS figure which can be saved to the interactive HTML file fname with PlotlyJS.savefig(p, fname).\n\n\n\n\n\n","category":"function"},{"location":"api/#RVModelingToolkit.plot_rvs_phased_all","page":"API","title":"RVModelingToolkit.plot_rvs_phased_all","text":"plot_rvs_phased_all(post::RVPosterior, pars::Parameters; data_colors)\n\nWrapper to plot all phased RVs. Returns 2 vectors of Plotly figures, which can be saved to the interactive HTML files with PlotlyJS.savefig(p, fname).\n\n\n\n\n\n","category":"function"},{"location":"api/#RVModelingToolkit.plot_rvs_full","page":"API","title":"RVModelingToolkit.plot_rvs_full","text":"plot_rvs_full(post::RVPosterior, pars::Parameters, n_model_pts=5000; data_colors=nothing, gp_colors=nothing, time_offset=nothing, gp_Δt=nothing, gp_δt=nothing)\n\nPlots the data RVs, the Keplerian model, and the GP as a function of modified BJD, as well as the residuals (separate plots). Returns two PlotlyJS plots, which can be saved to the interactive HTML files with PlotlyJS.savefig(p, fname).\n\n\n\n\n\n","category":"function"},{"location":"api/#RVModelingToolkit.corner_plot","page":"API","title":"RVModelingToolkit.corner_plot","text":"corner_plot(post::RVPosterior, mcmc_result::NamedTuple)\n\nCreate a corner plot with the NamedTuple returned from run_mcmc.\n\n\n\n\n\n","category":"function"},{"location":"api/#Brute-Force-Periodogram","page":"API","title":"Brute Force Periodogram","text":"","category":"section"},{"location":"api/","page":"API","title":"API","text":"brute_force_periodogram","category":"page"},{"location":"api/#RVModelingToolkit.brute_force_periodogram","page":"API","title":"RVModelingToolkit.brute_force_periodogram","text":"brute_force_periodogram(post::RVPosterior, p0::Parameters, periods::AbstractVector{<:Real}, planet_index::Int; threads::Bool=true)\n\nGenerate a periodogram by performing a MAP fit for a range in fixed periods for a particular test planet. Returns a vector of NamedTuples, each with fields:     - pbest::Parameters The best fit parameters.     - lnL::Float64 The best fit log likelihood.     - redχ2::Float64 The reduced chi-square metric.     - aicc::Float64 The AICc     - bic::Float64 The BIC The fits will be run in parallel using threads if threads=true (default) and Julia is running with more than one thread.\n\n\n\n\n\n","category":"function"},{"location":"api/#Planetary-and-Orbital-Measurements-(Coming-soon)","page":"API","title":"Planetary and Orbital Measurements (Coming soon)","text":"","category":"section"},{"location":"api/#Mass,-Radius-(C-K),-Density,-SMA-...","page":"API","title":"Mass, Radius (C-K), Density, SMA ...","text":"","category":"section"},{"location":"examples/#Examples","page":"Examples","title":"Examples","text":"","category":"section"},{"location":"examples/#Example-1:-KELT-24,-a-massive-hot-Jupiter,-no-GP","page":"Examples","title":"Example 1: KELT-24, a massive hot Jupiter, no GP","text":"","category":"section"},{"location":"examples/","page":"Examples","title":"Examples","text":"Download the RVs for KELT-24 from here.","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"\n# Imports\nusing RVModelingToolkit\nusing Statistics\nusing PlotlyJS\n\n# Load in data (csv file with first row time, mnvel, errvel,tel)\ndata = read_radvel_file(\"kelt24_rvs_20220708_example.txt\")\n\n# Init parameters and planets dictionary\npars = Parameters()\nplanets = Dict{Int, OrbitBasis}()\n\n# Planet 1 (b)\n# per, tc, ecc, w, k;\n# period [days]\n# time of conjunction (BJD)\n# eccentricity ∈ [0, 1]\n# Arg of periastron of star's orbit [radians]\n# RV semi-amplitude [m/s]\nplanets[1] = TCOrbitBasis()\nper1 = 5.5514926\ntc1 =  2457147.0529\necc1 = 0.077\necc1_unc = 0.04\nw1 = 55 * π / 180\nw1_unc = 15 * π / 180\npars[\"per1\"] = Parameter(value=per1, vary=false)\npars[\"tc1\"] = Parameter(value=tc1, vary=false)\npars[\"ecc1\"] = Parameter(value=ecc1, vary=true)\nadd_prior!(pars[\"ecc1\"], Priors.Uniform(0, 1))\nadd_prior!(pars[\"ecc1\"], Priors.Gaussian(ecc1, ecc1_unc))\npars[\"w1\"] = Parameter(value=w1, vary=true)\nadd_prior!(pars[\"w1\"], Priors.Gaussian(w1, w1_unc))\npars[\"k1\"] = Parameter(value=450, vary=true)\nadd_prior!(pars[\"k1\"], Priors.Positive())\n\n# Zero points of each spectrograph\nfor instname ∈ keys(data)\n    pars[\"gamma_$instname\"] = Parameter(value=median(data[instname].rv) + π / 100, vary=true)\nend\n\n# Linear trend parameter\npars[\"gamma_dot\"] = Parameter(value=0.1, vary=true)\nadd_prior!(pars[\"gamma_dot\"], Priors.Uniform(-1, 1))\n\n# \"Jitter\" (uncorrelated noise; adds a correction term (must be positive) in-quadrature to the posterior distribution, unique to each spectrograph)\nfor instname ∈ keys(data)\n    pname = \"jitter_$instname\"\n    pars[pname] = Parameter(value=10, vary=true)\n    add_prior!(pars[pname], Priors.JeffreysGD(1E-10, 200))\nend\n\n# TRES jitter tends to be zero, so we overwrite it here\npars[\"jitter_TRES\"] = Parameter(value=0, vary=false)\n\n# Store each like in a dictionary\nlikes = Dict{String, RVLikelihood}()\n\n# Planets, trend polynomial degree (gammas), trend zero point for terms > 0, also used in plots\nmodel = RVModel(planets, 1, t0=round(median(get_times(data))))\n\n# Construct single likelihood and posterior objects. Here the key \"rvs_all\" is arbitrary.\nlikes[\"rvs_all\"] = RVLikelihood(data, model)\npost = RVPosterior(likes)\nupdate_latex_strings!(post, pars)\n\n# maximize lnL with NelderMead (returns NamedTuple)\nmap_result = run_mapfit(post, pars)\npbest = map_result.pbest\nprintln(pbest)\n\n# Interactive RV plots with PlotlyJS\nstar_name = \"KELT-24\"\ndata_colors = Dict(\"TRES\" => COLORS_HEX_GADFLY[1], \"SONG\" => COLORS_HEX_GADFLY[2])\nfig_full, fig_res = plot_rvs_full(post, pbest, data_colors=data_colors)\nPlotlyJS.savefig(fig_full, \"$(star_name)_rvs.html\")\nPlotlyJS.savefig(fig_res, \"$(star_name)_rvs_residuals.html\")\nfigs_phased, figs_phased_res = plot_rvs_phased_all(post, pbest, data_colors=data_colors, star_name=star_name)\nfor i=1:length(figs_phased)\n    PlotlyJS.savefig(figs_phased[i], \"$(star_name)_$(ALPHABET[i])_rvs_phased.html\")\n    PlotlyJS.savefig(figs_phased_res[i], \"$(star_name)_$(ALPHABET[i])_rvs_phased_residuals.html\")\nend\n\n# MCMC (returns NamedTuple)\nmcmc_result = run_mcmc(post, pbest, n_burn_steps=500, n_τs_thresh=40, n_min_steps=1000, n_max_steps=50_000)\n\n# Corner plot\nfig = corner_plot(post, mcmc_result)\nfig.savefig(\"$(star_name)_corner.png\")\n\n# Model comparison (Vector of NamedTuples sorted by the delta AICc)\nmc_result = model_comparison(post, pbest)","category":"page"},{"location":"examples/#Example-2:-AU-Mic,-with-disjoint-GPs.","page":"Examples","title":"Example 2: AU Mic, with disjoint GPs.","text":"","category":"section"},{"location":"examples/","page":"Examples","title":"Examples","text":"Download the RVs for AU Mic from here.","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"using RVModelingToolkit\nusing Statistics\nusing DataStructures\nusing PlotlyJS\n\n# Data\nfname = \"aumic_rvs_20220710_example.txt\"\ndata = read_radvel_file(fname)\n\n# Init parameters and planets dictionary\npars = Parameters()\nplanets = OrderedDict{Int, OrbitBasis}()\n\n# Planet 1 (detected at a few sigma here)\nplanets[1] = TCOrbitBasis()\nper1 = 8.4629991\ntc1 = 2458330.39046\necc1 = 0.189\nw1 = 1.5449655 + π\n\npars[\"per1\"] = Parameter(value=per1, vary=false)\npars[\"tc1\"] = Parameter(value=tc1, vary=false)\npars[\"ecc1\"] = Parameter(value=ecc1, vary=false)\npars[\"w1\"] = Parameter(value=w1, vary=false)\npars[\"k1\"] = Parameter(value=8, vary=true)\nadd_prior!(pars[\"k1\"], Priors.Positive())\n\n# Planet c (not detected through this analysis)\nplanets[2] = TCOrbitBasis()\nper2 = 18.858991\ntc2 = 2458342.2243\n\npars[\"per2\"] = Parameter(value=per2, vary=false)\npars[\"tc2\"] = Parameter(value=tc2, vary=false)\npars[\"ecc2\"] = Parameter(value=0, vary=false)\npars[\"w2\"] = Parameter(value=π, vary=false)\npars[\"k2\"] = Parameter(value=5, vary=true)\nadd_prior!(pars[\"k2\"], Priors.Positive())\n\n# Gamma offsets, don't include gamma dot or ddot yet\nfor instname ∈ keys(data)\n    pars[\"gamma_$instname\"] = Parameter(value=median(data[instname].rv) + π / 100, vary=true)\nend\n\n# Fix jitter to zero by default\nfor instname ∈ keys(data)\n    pname = \"jitter_$instname\"\n    pars[pname] = Parameter(value=0, vary=false)\nend\n\n# Increase HIRES error bars\npars[\"jitter_HIRES\"] = Parameter(value=5, vary=false)\n\n# GP amplitudes for each spectrogrpah\nfor (i, instname) ∈ enumerate(keys(data))\n    pname = \"gp_amp_$instname\"\n    pars[pname] = Parameter(value=std(data[instname].rv), vary=true)\n    add_prior!(pars[pname], Priors.JeffreysGD(1, 600))\n    pars[pname].latex_str = L\"\\eta_{\\sigma,%$instname}\"\nend\n\n# GP decay time (days)\npars[\"gp_decay\"] = Parameter(value=100, vary=false)\nadd_prior!(pars[\"gp_decay\"], Priors.Uniform(20, 2_000))\npars[\"gp_decay\"].latex_str = L\"\\eta_{\\tau}\"\n\n# GP smoothness (unitless)\npars[\"gp_per_length\"] = Parameter(value=0.28, vary=false)\npars[\"gp_per_length\"].latex_str = \"\\eta_{\\ell}\"\n\n# GP period (days)\npars[\"gp_per\"] = Parameter(value=4.836, vary=true)\nadd_prior!(pars[\"gp_per\"], Priors.Gaussian(pars[\"gp_per\"].value, 0.001))\npars[\"gp_per\"].latex_str = L\"\\eta_{P}\"\n\n# noise, model, like, post\n# Each spectrograph gets its own like here\nlikes = OrderedDict{String, RVLikelihood}()\nfor _data ∈ values(data)\n    data_view = get_view(data, [_data.instname])\n    model = RVModel(planets, 0, t0=2450000.0)\n    gp = GaussianProcess(QuasiPeriodic([\"gp_amp_$(_data.instname)\", \"gp_decay\", \"gp_per_length\", \"gp_per\"]))\n    likes[_data.instname] = RVLikelihood(data_view, model, gp)\nend\n\npost = RVPosterior(likes)\nupdate_latex_strings!(post, pars)\n\n# Map fit\nmap_result = run_mapfit(post, pars)\n\n# Alias best fit params\npbest = map_result.pbest\nprintln(pbest)\n\n# RV plots, also color GPs to match spectrographs\nstar_name = \"AU_Mic\"\ndata_colors = Dict(\"HIRES\" => COLORS_HEX_GADFLY[1], \"TRES\" => COLORS_HEX_GADFLY[2], \"SPIRou\" => COLORS_HEX_GADFLY[3], \"iSHELL\" => COLORS_HEX_GADFLY[4])\ngp_colors = Dict(\"GP [HIRES]\" => COLORS_HEX_GADFLY[1], \"GP [TRES]\" => COLORS_HEX_GADFLY[2], \"GP [SPIRou]\" => COLORS_HEX_GADFLY[3], \"GP [iSHELL]\" => COLORS_HEX_GADFLY[4])\nfig_full, fig_res = plot_rvs_full(post, pbest, data_colors=data_colors, gp_colors=gp_colors, gp_Δt=50, gp_δt=0.02)\nPlotlyJS.savefig(fig_full, \"$(star_name)_rvs.html\")\nPlotlyJS.savefig(fig_res, \"$(star_name)_rvs_residuals.html\")\nfigs_phased, figs_phased_res = plot_rvs_phased_all(post, pbest, data_colors=data_colors, titles=true, star_name=\"AU Mic\")\nfor i=1:length(figs_phased)\n    PlotlyJS.savefig(figs_phased[i], \"$(star_name)_$(ALPHABET[i])_rvs_phased.html\")\n    PlotlyJS.savefig(figs_phased_res[i], \"$(star_name)_$(ALPHABET[i])_rvs_phased_residuals.html\")\nend\n\n# MCMC\nmcmc_result = run_mcmc(post, pbest, n_burn_steps=500, n_τs_thresh=40, n_min_steps=1000, n_max_steps=80_000)\n\n# Corner plot\nfig = corner_plot(post, mcmc_result)\nfig.savefig(\"$(star_name)_corner.png\", dpi=200)","category":"page"},{"location":"examples/#Example-3:-AU-Mic,-with-J1-kernel.","page":"Examples","title":"Example 3: AU Mic, with J1 kernel.","text":"","category":"section"},{"location":"examples/","page":"Examples","title":"Examples","text":"using RVModelingToolkit\nusing Statistics\nusing DataStructures\nusing PlotlyJS\n\n# Data\nfname = \"aumic_rvs_20220710_example.txt\"\ndata = read_radvel_file(fname)\n\n# Init parameters and planets dictionary\npars = Parameters()\nplanets = OrderedDict{Int, OrbitBasis}()\n\n# Planet 1 (detected at a few sigma here)\nplanets[1] = TCOrbitBasis()\nper1 = 8.4629991\ntc1 = 2458330.39046\necc1 = 0.189\nw1 = 1.5449655 + π\n\npars[\"per1\"] = Parameter(value=per1, vary=false)\npars[\"tc1\"] = Parameter(value=tc1, vary=false)\npars[\"ecc1\"] = Parameter(value=ecc1, vary=false)\npars[\"w1\"] = Parameter(value=w1, vary=false)\npars[\"k1\"] = Parameter(value=8, vary=true)\nadd_prior!(pars[\"k1\"], Priors.Positive())\n\n# Planet c (not detected through this analysis)\nplanets[2] = TCOrbitBasis()\nper2 = 18.858991\ntc2 = 2458342.2243\n\npars[\"per2\"] = Parameter(value=per2, vary=false)\npars[\"tc2\"] = Parameter(value=tc2, vary=false)\npars[\"ecc2\"] = Parameter(value=0, vary=false)\npars[\"w2\"] = Parameter(value=π, vary=false)\npars[\"k2\"] = Parameter(value=5, vary=true)\nadd_prior!(pars[\"k2\"], Priors.Positive())\n\n# Gamma offsets, don't include gamma dot or ddot yet\nfor instname ∈ keys(data)\n    pars[\"gamma_$instname\"] = Parameter(value=median(data[instname].rv) + π / 100, vary=true)\nend\n\n# Fix jitter to zero by default\nfor instname ∈ keys(data)\n    pname = \"jitter_$instname\"\n    pars[pname] = Parameter(value=0, vary=false)\nend\n\n# Increase HIRES error bars\npars[\"jitter_HIRES\"] = Parameter(value=5, vary=false)\n\n# # GP amps\ngp_par_names = String[]\nfor (i, instname) ∈ enumerate(keys(data))\n    pname = \"gp_amp_\" * instname\n    push!(gp_par_names, pname)\n    pars[pname] = Parameter(value=std(data[instname].rv), vary=true)\n    add_prior!(pars[pname], Priors.JeffreysGD(1, 600))\n    pars[pname].latex_str = L\"\\eta_{\\sigma,%$instname}\"\nend\n\n# GP decay time\npars[\"gp_decay\"] = Parameter(value=100, vary=false)\nadd_prior!(pars[\"gp_decay\"], Priors.Uniform(20, 2_000))\npars[\"gp_decay\"].latex_str = L\"\\eta_{\\\\tau}\"\npush!(gp_par_names, \"gp_decay\")\n\n# GP smoothness\npars[\"gp_per_length\"] = Parameter(value=0.28, vary=false)\npars[\"gp_per_length\"].latex_str = L\"\\eta_{\\ell}\"\npush!(gp_par_names, \"gp_per_length\")\n\n# GP period\npars[\"gp_per\"] = Parameter(value=4.836, vary=true)\nadd_prior!(pars[\"gp_per\"], Priors.Gaussian(pars[\"gp_per\"].value, 0.001))\npars[\"gp_per\"].latex_str = L\"\\eta_{P}\"\npush!(gp_par_names, \"gp_per\")\n\n# noise, model, like, post\n# Each spectrograph gets its own like here\nlikes = Dict{String, RVLikelihood}()\nmodel = RVModel(planets, 0, t0=2450000.0)\ngp = GaussianProcess(ChromaticKernelJ1(gp_par_names))\nlikes[\"rvs_j1\"] = RVLikelihood(data, model, gp)\n\npost = RVPosterior(likes)\nupdate_latex_strings!(post, pars)\n\n# Map fit\nmap_result = run_mapfit(post, pars)\n\n# Alias best fit params\npbest = map_result.pbest\nprintln(pbest)\n\n# RV plots, also color GPs to match spectrographs\nstar_name = \"AU_Mic\"\ndata_colors = Dict(\"HIRES\" => COLORS_HEX_GADFLY[1], \"TRES\" => COLORS_HEX_GADFLY[2], \"SPIRou\" => COLORS_HEX_GADFLY[3], \"iSHELL\" => COLORS_HEX_GADFLY[4])\ngp_colors = Dict(\"GP HIRES\" => COLORS_HEX_GADFLY[1], \"GP TRES\" => COLORS_HEX_GADFLY[2], \"GP SPIRou\" => COLORS_HEX_GADFLY[3], \"GP iSHELL\" => COLORS_HEX_GADFLY[4])\nfig_full, fig_res = plot_rvs_full(post, pbest, data_colors=data_colors, gp_colors=gp_colors, gp_Δt=50, gp_δt=0.02)\nPlotlyJS.savefig(fig_full, \"$(star_name)_rvs.html\")\nPlotlyJS.savefig(fig_res, \"$(star_name)_rvs_residuals.html\")\nfigs_phased, figs_phased_res = plot_rvs_phased_all(post, pbest, data_colors=data_colors, titles=true, star_name=\"AU Mic\")\nfor i=1:length(figs_phased)\n    PlotlyJS.savefig(figs_phased[i], \"$(star_name)_$(ALPHABET[i])_rvs_phased.html\")\n    PlotlyJS.savefig(figs_phased_res[i], \"$(star_name)_$(ALPHABET[i])_rvs_phased_residuals.html\")\nend\n\n# MCMC\nmcmc_result = run_mcmc(post, pbest, n_burn_steps=500, n_τs_thresh=40, n_min_steps=1000, n_max_steps=80_000)\n\n# Corner plot\nfig = corner_plot(post, mcmc_result)\nfig.savefig(\"$(star_name)_corner.png\", dpi=200)","category":"page"},{"location":"examples/#Example-4:-AU-Mic,-with-J2-kernel.","page":"Examples","title":"Example 4: AU Mic, with J2 kernel.","text":"","category":"section"},{"location":"examples/","page":"Examples","title":"Examples","text":"using RVModelingToolkit\nusing Statistics\nusing DataStructures\nusing PlotlyJS\n\n# Data\nfname = \"aumic_rvs_20220710_example.txt\"\ndata = read_radvel_file(fname)\ndata[\"HIRES\"].λ = 550.0\ndata[\"TRES\"].λ = 650\ndata[\"SPIRou\"].λ = 1650.0\ndata[\"iSHELL\"].λ = 2350.0\n\n# Init parameters and planets dictionary\npars = Parameters()\nplanets = OrderedDict{Int, OrbitBasis}()\n\n# Planet 1 (detected at a few sigma here)\nplanets[1] = TCOrbitBasis()\nper1 = 8.4629991\ntc1 = 2458330.39046\necc1 = 0.189\nw1 = 1.5449655 + π\n\npars[\"per1\"] = Parameter(value=per1, vary=false)\npars[\"tc1\"] = Parameter(value=tc1, vary=false)\npars[\"ecc1\"] = Parameter(value=ecc1, vary=false)\npars[\"w1\"] = Parameter(value=w1, vary=false)\npars[\"k1\"] = Parameter(value=8, vary=true)\nadd_prior!(pars[\"k1\"], Priors.Positive())\n\n# Planet c (not detected through this analysis)\nplanets[2] = TCOrbitBasis()\nper2 = 18.858991\ntc2 = 2458342.2243\n\npars[\"per2\"] = Parameter(value=per2, vary=false)\npars[\"tc2\"] = Parameter(value=tc2, vary=false)\npars[\"ecc2\"] = Parameter(value=0, vary=false)\npars[\"w2\"] = Parameter(value=π, vary=false)\npars[\"k2\"] = Parameter(value=5, vary=true)\nadd_prior!(pars[\"k2\"], Priors.Positive())\n\n# Gamma offsets, don't include gamma dot or ddot yet\nfor instname ∈ keys(data)\n    pars[\"gamma_$instname\"] = Parameter(value=median(data[instname].rv) + π / 100, vary=true)\nend\n\n# Fix jitter to zero by default\nfor instname ∈ keys(data)\n    pname = \"jitter_$instname\"\n    pars[pname] = Parameter(value=0, vary=false)\nend\n\n# Increase HIRES error bars\npars[\"jitter_HIRES\"] = Parameter(value=5, vary=false)\n\n# GP\ngp_par_names = String[]\npush!(gp_par_names, \"gp_amp_0\")\npars[\"gp_amp_0\"] = Parameter(value=150, vary=true)\nadd_prior!(pars[\"gp_amp_0\"], Priors.JeffreysGD(1, 600))\npars[\"gp_amp_0\"].latex_str = L\"\\eta_{\\sigma,0}\"\n\n# GP\npush!(gp_par_names, \"gp_amp_pl\")\npars[\"gp_amp_pl\"] = Parameter(value=1.5, vary=true)\nadd_prior!(pars[\"gp_amp_pl\"], Priors.Uniform(-2, 4))\npars[\"gp_amp_pl\"].latex_str = L\"\\eta_{\\lambda}\"\n\n# GP decay time\npars[\"gp_decay\"] = Parameter(value=100, vary=false)\nadd_prior!(pars[\"gp_decay\"], Priors.Uniform(20, 2_000))\npars[\"gp_decay\"].latex_str = L\"\\eta_{\\\\tau}\"\npush!(gp_par_names, \"gp_decay\")\n\n# GP smoothness\npars[\"gp_per_length\"] = Parameter(value=0.28, vary=false)\npars[\"gp_per_length\"].latex_str = L\"\\eta_{\\ell}\"\npush!(gp_par_names, \"gp_per_length\")\n\n# GP period\npars[\"gp_per\"] = Parameter(value=4.836, vary=true)\nadd_prior!(pars[\"gp_per\"], Priors.Gaussian(pars[\"gp_per\"].value, 0.001))\npars[\"gp_per\"].latex_str = L\"\\eta_{P}\"\npush!(gp_par_names, \"gp_per\")\n\n# noise, model, like, post\nlikes = OrderedDict{String, RVLikelihood}()\nmodel = RVModel(planets, 0, t0=2450000.0)\ngp = GaussianProcess(ChromaticKernelJ2(gp_par_names, 550.0))\nlikes[\"rvs_j2\"] = RVLikelihood(data, model, gp)\n\npost = RVPosterior(likes)\nupdate_latex_strings!(post, pars)\n\n# Map fit\nmap_result = run_mapfit(post, pars)\n\n# Alias best fit params\npbest = map_result.pbest\nprintln(pbest)\n\n# RV plots, also color GPs to match spectrographs\nstar_name = \"AU_Mic\"\ndata_colors = Dict(\"HIRES\" => COLORS_HEX_GADFLY[1], \"TRES\" => COLORS_HEX_GADFLY[2], \"SPIRou\" => COLORS_HEX_GADFLY[3], \"iSHELL\" => COLORS_HEX_GADFLY[4])\ngp_colors = Dict(\"GP 550\" => COLORS_HEX_GADFLY[1], \"GP 650\" => COLORS_HEX_GADFLY[2], \"GP 1650\" => COLORS_HEX_GADFLY[3], \"GP 2350\" => COLORS_HEX_GADFLY[4])\nfig_full, fig_res = plot_rvs_full(post, pbest, data_colors=data_colors, gp_colors=gp_colors, gp_Δt=50, gp_δt=0.02)\nPlotlyJS.savefig(fig_full, \"$(star_name)_rvs.html\")\nPlotlyJS.savefig(fig_res, \"$(star_name)_rvs_residuals.html\")\nfigs_phased, figs_phased_res = plot_rvs_phased_all(post, pbest, data_colors=data_colors, titles=true, star_name=\"AU Mic\")\nfor i=1:length(figs_phased)\n    PlotlyJS.savefig(figs_phased[i], \"$(star_name)_$(ALPHABET[i])_rvs_phased.html\")\n    PlotlyJS.savefig(figs_phased_res[i], \"$(star_name)_$(ALPHABET[i])_rvs_phased_residuals.html\")\nend\n\n# MCMC\nmcmc_result = run_mcmc(post, pbest, n_burn_steps=500, n_τs_thresh=40, n_min_steps=1000, n_max_steps=80_000)\n\n# Corner plot\nfig = corner_plot(post, mcmc_result)\nfig.savefig(\"$(star_name)_corner.png\", dpi=200)","category":"page"},{"location":"#RVModelingToolkit.jl","page":"RVModelingToolkit.jl","title":"RVModelingToolkit.jl","text":"","category":"section"},{"location":"","page":"RVModelingToolkit.jl","title":"RVModelingToolkit.jl","text":"Documentation for RVModelingToolkit.jl","category":"page"},{"location":"#Details","page":"RVModelingToolkit.jl","title":"Details","text":"","category":"section"},{"location":"","page":"RVModelingToolkit.jl","title":"RVModelingToolkit.jl","text":"A toolkit to model radial velocities measured from high resolution spectrographs with Keplerian orbits + Gaussian process models, largely based on RadVel and pychell.","category":"page"},{"location":"#Installation","page":"RVModelingToolkit.jl","title":"Installation","text":"","category":"section"},{"location":"","page":"RVModelingToolkit.jl","title":"RVModelingToolkit.jl","text":"using Pkg\nPkg.add(url=\"https://github.com/astrobc1/RVModelingToolkit.jl\")","category":"page"}]
}
